198097@client17:~/Lab26$ cat head.txt
***********************************
*                                 *
*    Лабораторная работа №25-26   *
*  Автоматизация сборки программ  *
* модульной структуры на языке Си *
*  с использованием утилиты make. *
*   Абстрактные типы данных.      *
*           Рекурсия.             *
*   Модульное программирование    *
*          на языке Си.           *
*  Выполнил студент группы 104    *
*  Черница Артём Александрович    *
*                                 *
***********************************
198097@client17:~/Lab26$ cat stack_static.h
#ifndef LAB26_STACK_STATIC_H
#define LAB26_STACK_STATIC_H

typedef struct {
   int size;
   int *array;
} SStack;

void init(SStack *stack);
int empty(const SStack *stack);
void push(SStack *stack, int value);
void pop(SStack *stack);
int peak(const SStack *stack);
int size(SStack *stack);
void print(const SStack *stack);
void spswap(SStack *stack); // special swap
void sort(SStack *stack);

#endif //LAB26_STACK_STATIC_H
198097@client17:~/Lab26$ cat stack_static.c
#include "stack_static.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void init(SStack* stack) {
   stack->size = 0;
   stack->array = NULL;
}

int empty(const SStack *stack) {
   return stack->size == 0;
}

void push(SStack *stack, int value) {
   if (empty(stack)) {
      stack->array = malloc(sizeof(int));
      stack->size = 1;
      stack->array[stack->size-1] = value;
      return;
   }

   stack->array = realloc(stack->array, (stack->size + 1) * sizeof(int));
   stack->size += 1;
   stack->array[stack->size - 1] = value;
}

void pop(SStack *stack) {
   if (empty(stack)) {
      return;
   }

   stack->array = realloc(stack->array, (stack->size - 1) * sizeof(int));
   stack->size -= 1;
}

int peak(const SStack *stack) {
   if (empty(stack)) {
      return 0;
   }

   return stack->array[stack->size - 1];
}

int size(SStack *stack) {

   return stack->size;
}

void print(const SStack *stack) {
   printf("[---> ");
   for (int i = 0; i < stack->size; ++i) {
      printf("%-4d", stack->array[stack->size - i - 1]);
   }
   printf("]\n");
}

void spswap(SStack *stack) {
   SStack temp; init(&temp);
   SStack copy; init(&copy);
   copy.array = malloc(sizeof(int) * stack->size);
   memcpy(copy.array, stack->array, stack->size * sizeof(int));
   copy.size = stack->size;

   while (!empty(&copy)) {
      int buf = peak(&copy);
      pop(&copy);
      if (peak(&copy) > buf) {
         push(&temp, peak(&copy));
         push(&temp, buf);
         pop(&copy);
         break;
      }
      else {
         push(&temp, buf);
      }
   }

   while (!empty(&temp)) {
      push(&copy, peak(&temp));
      pop(&temp);
   }

   memcpy(stack->array, copy.array, stack->size * sizeof(int));
   free(temp.array);
   free(copy.array);
}

void sort(SStack *stack) {
   for (int i = 0; i < stack->size; ++i) {
      for (int j = i; j < stack->size; ++j) {
         spswap(stack);
      }
   }
}
198097@client17:~/Lab26$ cat stack_dynamic.h
#ifndef LAB26_STACK_DYNAMIC_H
#define LAB26_STACK_DYNAMIC_H

typedef struct Item_{
   struct Item_* next;
   int value;
} Item;

typedef struct {
   int size;
   Item* root;
} DStack;

void init(DStack *stack);
int empty(const DStack *stack);
void push(DStack *stack, int value);
void pop(DStack *stack);
int peak(const DStack *stack);
int size(DStack *stack);
void print(const DStack *stack);
void spswap(DStack *stack); // special swap
void sort(DStack *stack);

#endif //LAB26_STACK_DYNAMIC_H
198097@client17:~/Lab26$ cat stack_dynamic.c
#include "stack_dynamic.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>

void init(DStack *stack) {
   stack->size = 0;
   stack->root = malloc(sizeof(Item));
}

int empty(const DStack *stack) {
   return stack->size == 0;
}

void push(DStack *stack, int value) {
   if (empty(stack)) {
       stack->size = 1;
       if (stack->root == NULL) {
         stack->root = malloc(sizeof(Item));
       }
       stack->root->value = value;
       return;
   }

   Item *item = malloc(sizeof(Item));
   item = stack->root;
   for (int i = 0; i < stack->size - 1; ++i) {
      item = item->next;
   }
   item->next = malloc(sizeof(Item));
   item->next->value = value;
   stack->size += 1;
//   free(item);
}

void pop(DStack *stack) {
   if (empty(stack)) {
      return;
   }

   if (stack->size == 1) {
      stack->size = 0;
      free(stack->root);
      stack->root = NULL;
      return;
   }

   Item *item = malloc(sizeof(Item));
   item = stack->root;
   for (int i = 0; i < stack->size - 2; ++i) {
      item = item->next;
   }
   free(item->next);
   item->next = NULL;
   stack->size -=1;
}

int peak(const DStack *stack) {
   if (empty(stack)) {
      return 0;
   }

   Item *item = malloc(sizeof(Item));
   item = stack->root;
   for (int i = 0; i < stack->size - 1; ++i) {
      item = item->next;
   }

//   free(item);
   return item->value;
}

int size(DStack *stack) {
   return stack->size;
}

void print(const DStack *stack) {
   if (empty(stack)) {
      printf("Stack is empty...\n");
      return;
   }

   printf("[---> ");

   DStack copy; init(&copy);
   Item *item = malloc(sizeof(Item));
   item = stack->root;
   for (int i = 0; i < stack->size; ++i) {
      push(&copy, item->value);
      item = item->next;
   }

   DStack temp; init(&temp);
   for (int i = 0; i < stack->size; ++i) {
      push(&temp, peak(&copy));
      pop(&copy);
   }

   item = temp.root;
   for (int i = 0; i < temp.size; ++i) {
      printf("%-4d", item->value);
      item = item->next;
   }

   printf("]\n");
}

void spswap(DStack *stack) {
   DStack temp; init(&temp);
   DStack copy; init(&copy);
   Item *item = malloc(sizeof(Item));
   item = stack->root;
   for (int i = 0; i < stack->size; ++i) {
      push(&copy, item->value);
      item = item->next;
   }
   copy.size = stack->size;

   while (!empty(&copy)) {
      int buf = peak(&copy);
      pop(&copy);
      if (peak(&copy) > buf) {
         push(&temp, peak(&copy));
         push(&temp, buf);
         pop(&copy);
         break;
      }
      else {
         push(&temp, buf);
      }
   }

   while (!empty(&temp)) {
      push(&copy, peak(&temp));
      pop(&temp);
   }

   int count = stack->size;
   for (int i = 0; i < count; ++i) {
      pop(stack);
   }
   item = copy.root;
   for (int i = 0; i < count; ++i) {
      push(stack, item->value);
      item = item->next;
   }
}

void sort(DStack *stack) {
   for (int i = 0; i < stack->size; ++i) {
      for (int j = i; j < stack->size; ++j) {
         spswap(stack);
      }
   }
}
198097@client17:~/Lab26$ cat Makefile
CCFLAGS = -g -Wall -std=c99

main: main.o stack_static.o
	gcc -o main main.o stack_static.o
main.o: main.c stack_static.h
	gcc -c $(CCFLAGS) main.c
stack_static.o: stack_static.c stack_static.h
	gcc -c $(CCFLAGS) stack_static.c
198097@client17:~/Lab26$ cat MakeFile2
CCFLAGS = -g -Wall -std=c99

main: main.o stack_dynamic.o
	gcc -o main main.o stack_dynamic.o
main.o: main.c stack_dynamic.h
	gcc -c $(CCFLAGS) main.c
stack_dynamic.o: stack_dynamic.c stack_dynamic.h
	gcc -c $(CCFLAGS) stack_dynamic.c
198097@client17:~/Lab26$ cat main.c
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
//#include "stack_dynamic.h"
#include "stack_static.h"

int main() {
   SStack sstack;
   init(&sstack);
   push(&sstack, 4);
   push(&sstack, 2);
   push(&sstack, 3);
   push(&sstack, 5);
   push(&sstack, 1);
   print(&sstack);
   sort(&sstack);
   print(&sstack);
   int s = size(&sstack);
   for (int i = 0; i < s; ++i) {
      pop(&sstack);
   }
   push(&sstack, 49);
   push(&sstack, 95);
   push(&sstack, 58);
   push(&sstack, 6);
   push(&sstack, 29);
   push(&sstack, 69);
   push(&sstack, 81);
   push(&sstack, 78);
   push(&sstack, 11);
   push(&sstack, 37);
   print(&sstack);
   sort(&sstack);
   print(&sstack);

   return 0;
}
198097@client17:~/Lab26$ make
gcc -c -g -Wall -std=c99 main.c
gcc -c -g -Wall -std=c99 stack_static.c
gcc -o main main.o stack_static.o
198097@client17:~/Lab26$ vi main.c
198097@client17:~/Lab26$ cat main.c
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include "stack_dynamic.h"
//#include "stack_static.h"

int main() {
   DStack dstack;
   init(&dstack);
   push(&dstack, 4);
   push(&dstack, 2);
   push(&dstack, 3);
   push(&dstack, 5);
   push(&dstack, 1);
   print(&dstack);
   sort(&dstack);
   print(&dstack);
   int s = size(&dstack);
   for (int i = 0; i < s; ++i) {
      pop(&dstack);
   }
   push(&dstack, 49);
   push(&dstack, 95);
   push(&dstack, 58);
   push(&dstack, 6);
   push(&dstack, 29);
   push(&dstack, 69);
   push(&dstack, 81);
   push(&dstack, 78);
   push(&dstack, 11);
   push(&dstack, 37);
   print(&dstack);
   sort(&dstack);
   print(&dstack);

   return 0;
}
198097@client17:~/Lab26$ make --file Makefile2
gcc -c -g -Wall -std=c99 main.c
gcc -c -g -Wall -std=c99 stack_dynamic.c
gcc -o main main.o stack_dynamic.o
198097@client17:~/Lab26$ make --file Makefile2
make: `main' is up to date.
198097@client17:~/Lab26$ touch main.c
198097@client17:~/Lab26$ make --file Makefile2
gcc -c -g -Wall -std=c99 main.c
gcc -o main main.o stack_dynamic.o
198097@client17:~/Lab26$